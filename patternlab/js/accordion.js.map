{"version":3,"sources":["src/patterns/components/usa-accordion/accordion.js"],"names":["behavior","require","select","toggle","isElementInViewport","PREFIX","prefix","CLICK","ACCORDION","BUTTON","EXPANDED","MULTISELECTABLE","getAccordionButtons","accordion","buttons","filter","button","closest","toggleButton","expanded","safeExpanded","Error","multiselectable","getAttribute","forEach","other","showButton","hideButton","event","preventDefault","scrollIntoView","init","root","show","hide","getButtons","module","exports"],"mappings":"AAAA;;;;AACA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,yBAAD,CAAxB;;eACgDA,OAAO,CAAC,sBAAD,C;IAA/CC,M,YAAAA,M;IAAQC,M,YAAAA,M;IAAQC,mB,YAAAA,mB;;gBACGH,OAAO,CAAC,iBAAD,C;IAAlBI,M,aAARC,M;;AAER,IAAMC,KAAK,GAAG,OAAd;AAEA,IAAMC,SAAS,cAAOH,MAAP,0BAA6BA,MAA7B,yBAAf;AACA,IAAMI,MAAM,cAAOJ,MAAP,sCAAZ;AACA,IAAMK,QAAQ,GAAG,eAAjB;AACA,IAAMC,eAAe,GAAG,sBAAxB;AAEA;;;;;;;AAMA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,SAAD,EAAe;AACzC,MAAMC,OAAO,GAAGZ,MAAM,CAACO,MAAD,EAASI,SAAT,CAAtB;AAEA,SAAOC,OAAO,CAACC,MAAR,CAAe,UAACC,MAAD;AAAA,WAAYA,MAAM,CAACC,OAAP,CAAeT,SAAf,MAA8BK,SAA1C;AAAA,GAAf,CAAP;AACD,CAJD;AAMA;;;;;;;;;;;AASA,IAAMK,YAAY,GAAG,SAAfA,YAAe,CAACF,MAAD,EAASG,QAAT,EAAsB;AACzC,MAAMN,SAAS,GAAGG,MAAM,CAACC,OAAP,CAAeT,SAAf,CAAlB;AACA,MAAIY,YAAY,GAAGD,QAAnB;;AAEA,MAAI,CAACN,SAAL,EAAgB;AACd,UAAM,IAAIQ,KAAJ,WAAaZ,MAAb,+BAAwCD,SAAxC,EAAN;AACD;;AAEDY,EAAAA,YAAY,GAAGjB,MAAM,CAACa,MAAD,EAASG,QAAT,CAArB,CARyC,CAUzC;;AACA,MAAMG,eAAe,GAAGT,SAAS,CAACU,YAAV,CAAuBZ,eAAvB,MAA4C,MAApE;;AAEA,MAAIS,YAAY,IAAI,CAACE,eAArB,EAAsC;AACpCV,IAAAA,mBAAmB,CAACC,SAAD,CAAnB,CAA+BW,OAA/B,CAAuC,UAACC,KAAD,EAAW;AAChD,UAAIA,KAAK,KAAKT,MAAd,EAAsB;AACpBb,QAAAA,MAAM,CAACsB,KAAD,EAAQ,KAAR,CAAN;AACD;AACF,KAJD;AAKD;AACF,CApBD;AAsBA;;;;;;AAIA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACV,MAAD;AAAA,SAAYE,YAAY,CAACF,MAAD,EAAS,IAAT,CAAxB;AAAA,CAAnB;AAEA;;;;;;AAIA,IAAMW,UAAU,GAAG,SAAbA,UAAa,CAACX,MAAD;AAAA,SAAYE,YAAY,CAACF,MAAD,EAAS,KAAT,CAAxB;AAAA,CAAnB;;AAEA,IAAMH,SAAS,GAAGb,QAAQ,qBAErBO,KAFqB,sBAGnBE,MAHmB,YAGXmB,KAHW,EAGJ;AACdA,EAAAA,KAAK,CAACC,cAAN;AAEAX,EAAAA,YAAY,CAAC,IAAD,CAAZ;;AAEA,MAAI,KAAKK,YAAL,CAAkBb,QAAlB,MAAgC,MAApC,EAA4C;AAC1C;AACA;AACA;AACA,QAAI,CAACN,mBAAmB,CAAC,IAAD,CAAxB,EAAgC;AAC9B,WAAK0B,cAAL;AACD;AACF;AACF,CAhBmB,IAmBxB;AACEC,EAAAA,IADF,gBACOC,IADP,EACa;AACT9B,IAAAA,MAAM,CAACO,MAAD,EAASuB,IAAT,CAAN,CAAqBR,OAArB,CAA6B,UAACR,MAAD,EAAY;AACvC,UAAMG,QAAQ,GAAGH,MAAM,CAACO,YAAP,CAAoBb,QAApB,MAAkC,MAAnD;AACAQ,MAAAA,YAAY,CAACF,MAAD,EAASG,QAAT,CAAZ;AACD,KAHD;AAID,GANH;AAOEX,EAAAA,SAAS,EAATA,SAPF;AAQEC,EAAAA,MAAM,EAANA,MARF;AASEwB,EAAAA,IAAI,EAAEP,UATR;AAUEQ,EAAAA,IAAI,EAAEP,UAVR;AAWExB,EAAAA,MAAM,EAAEe,YAXV;AAYEiB,EAAAA,UAAU,EAAEvB;AAZd,CAnBwB,CAA1B;AAmCAwB,MAAM,CAACC,OAAP,GAAiBxB,SAAjB","sourcesContent":["'use strict';\r\nconst behavior = require('../../../utils/behavior');\r\nconst { select, toggle, isElementInViewport } = require('../../../utils/utils');\r\nconst { prefix: PREFIX } = require('../../../config');\r\n\r\nconst CLICK = 'click';\r\n\r\nconst ACCORDION = `.${PREFIX}-accordion, .${PREFIX}-accordion--bordered`;\r\nconst BUTTON = `.${PREFIX}-accordion__button[aria-controls]`;\r\nconst EXPANDED = 'aria-expanded';\r\nconst MULTISELECTABLE = 'aria-multiselectable';\r\n\r\n/**\r\n * Get an Array of button elements belonging directly to the given\r\n * accordion element.\r\n * @param {HTMLElement} accordion\r\n * @return {array<HTMLButtonElement>}\r\n */\r\nconst getAccordionButtons = (accordion) => {\r\n  const buttons = select(BUTTON, accordion);\r\n\r\n  return buttons.filter((button) => button.closest(ACCORDION) === accordion);\r\n};\r\n\r\n/**\r\n * Toggle a button's 'pressed' state, optionally providing a target\r\n * state.\r\n *\r\n * @param {HTMLButtonElement} button\r\n * @param {boolean?} expanded If no state is provided, the current\r\n * state will be toggled (from false to true, and vice-versa).\r\n * @return {boolean} the resulting state\r\n */\r\nconst toggleButton = (button, expanded) => {\r\n  const accordion = button.closest(ACCORDION);\r\n  let safeExpanded = expanded;\r\n\r\n  if (!accordion) {\r\n    throw new Error(`${BUTTON} is missing outer ${ACCORDION}`);\r\n  }\r\n\r\n  safeExpanded = toggle(button, expanded);\r\n\r\n  // XXX multiselectable is opt-in, to preserve legacy behavior\r\n  const multiselectable = accordion.getAttribute(MULTISELECTABLE) === 'true';\r\n\r\n  if (safeExpanded && !multiselectable) {\r\n    getAccordionButtons(accordion).forEach((other) => {\r\n      if (other !== button) {\r\n        toggle(other, false);\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * @param {HTMLButtonElement} button\r\n * @return {boolean} true\r\n */\r\nconst showButton = (button) => toggleButton(button, true);\r\n\r\n/**\r\n * @param {HTMLButtonElement} button\r\n * @return {boolean} false\r\n */\r\nconst hideButton = (button) => toggleButton(button, false);\r\n\r\nconst accordion = behavior(\r\n  {\r\n    [CLICK]: {\r\n      [BUTTON](event) {\r\n        event.preventDefault();\r\n\r\n        toggleButton(this);\r\n\r\n        if (this.getAttribute(EXPANDED) === 'true') {\r\n          // We were just expanded, but if another accordion was also just\r\n          // collapsed, we may no longer be in the viewport. This ensures\r\n          // that we are still visible, so the user isn't confused.\r\n          if (!isElementInViewport(this)) {\r\n            this.scrollIntoView();\r\n          }\r\n        }\r\n      }\r\n    }\r\n  },\r\n  {\r\n    init(root) {\r\n      select(BUTTON, root).forEach((button) => {\r\n        const expanded = button.getAttribute(EXPANDED) === 'true';\r\n        toggleButton(button, expanded);\r\n      });\r\n    },\r\n    ACCORDION,\r\n    BUTTON,\r\n    show: showButton,\r\n    hide: hideButton,\r\n    toggle: toggleButton,\r\n    getButtons: getAccordionButtons\r\n  }\r\n);\r\n\r\nmodule.exports = accordion;\r\n"],"file":"accordion.js"}
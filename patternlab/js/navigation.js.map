{"version":3,"sources":["src/patterns/components/usa-navigation/navigation.js"],"names":["behavior","require","select","toggle","FocusTrap","accordion","PREFIX","prefix","CLICK","BODY","NAV","NAV_LINKS","NAV_CONTROL","OPENERS","CLOSE_BUTTON","OVERLAY","CLOSERS","TOGGLES","join","ACTIVE_CLASS","VISIBLE_CLASS","navigation","navActive","isActive","document","body","classList","contains","toggleNav","active","safeActive","forEach","el","focusTrap","update","closeButton","querySelector","menuButton","focus","activeElement","resize","closer","getBoundingClientRect","width","call","onMenuClose","hideActiveNavDropdown","acc","closest","ACCORDION","getButtons","btn","hide","init","root","trapContainer","Escape","window","addEventListener","teardown","removeEventListener","module","exports"],"mappings":"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","sourcesContent":["'use strict';\r\nconst behavior = require('../../../utils/behavior');\r\nconst select = require('../../../utils/select');\r\nconst toggle = require('../../../utils/toggle');\r\nconst FocusTrap = require('../../../utils/focus-trap');\r\nconst accordion = require('../usa-accordion/accordion');\r\nconst { prefix: PREFIX } = require('../../../config');\r\n\r\nconst CLICK = 'click';\r\n\r\nconst BODY = 'body';\r\nconst NAV = `.${PREFIX}-nav`;\r\nconst NAV_LINKS = `${NAV} a`;\r\nconst NAV_CONTROL = `button.${PREFIX}-nav__link`;\r\nconst OPENERS = `.${PREFIX}-menu-btn`;\r\nconst CLOSE_BUTTON = `.${PREFIX}-nav__close`;\r\nconst OVERLAY = `.${PREFIX}-overlay`;\r\nconst CLOSERS = `${CLOSE_BUTTON}, .${PREFIX}-overlay`;\r\nconst TOGGLES = [NAV, OVERLAY].join(', ');\r\n\r\nconst ACTIVE_CLASS = 'usa-js-mobile-nav--active';\r\nconst VISIBLE_CLASS = 'is-visible';\r\n\r\nlet navigation;\r\nlet navActive;\r\n\r\nconst isActive = () => document.body.classList.contains(ACTIVE_CLASS);\r\n\r\nconst toggleNav = (active) => {\r\n  const { body } = document;\r\n  const safeActive = typeof active === 'boolean' ? active : !isActive();\r\n\r\n  body.classList.toggle(ACTIVE_CLASS, safeActive);\r\n\r\n  select(TOGGLES).forEach((el) =>\r\n    el.classList.toggle(VISIBLE_CLASS, safeActive)\r\n  );\r\n\r\n  navigation.focusTrap.update(safeActive);\r\n\r\n  const closeButton = body.querySelector(CLOSE_BUTTON);\r\n  const menuButton = body.querySelector(OPENERS);\r\n\r\n  if (safeActive && closeButton) {\r\n    // The mobile nav was just activated, so focus on the close button,\r\n    // which is just before all the nav elements in the tab order.\r\n    closeButton.focus();\r\n  }\r\n  else if (\r\n    !safeActive &&\r\n    document.activeElement === closeButton &&\r\n    menuButton\r\n  ) {\r\n    // The mobile nav was just deactivated, and focus was on the close\r\n    // button, which is no longer visible. We don't want the focus to\r\n    // disappear into the void, so focus on the menu button if it's\r\n    // visible (this may have been what the user was just focused on,\r\n    // if they triggered the mobile nav by mistake).\r\n    menuButton.focus();\r\n  }\r\n\r\n  return safeActive;\r\n};\r\n\r\nconst resize = () => {\r\n  const closer = document.body.querySelector(CLOSE_BUTTON);\r\n\r\n  if (isActive() && closer && closer.getBoundingClientRect().width === 0) {\r\n    // When the mobile nav is active, and the close box isn't visible,\r\n    // we know the user's viewport has been resized to be larger.\r\n    // Let's make the page state consistent by deactivating the mobile nav.\r\n    navigation.toggleNav.call(closer, false);\r\n  }\r\n};\r\n\r\nconst onMenuClose = () => navigation.toggleNav.call(navigation, false);\r\nconst hideActiveNavDropdown = () => {\r\n  toggle(navActive, false);\r\n  navActive = null;\r\n};\r\n\r\nnavigation = behavior(\r\n  {\r\n    [CLICK]: {\r\n      [NAV_CONTROL]() {\r\n        // If another nav is open, close it\r\n        if (navActive && navActive !== this) {\r\n          hideActiveNavDropdown();\r\n        }\r\n        // store a reference to the last clicked nav link element, so we\r\n        // can hide the dropdown if another element on the page is clicked\r\n        if (navActive) {\r\n          hideActiveNavDropdown();\r\n        }\r\n        else {\r\n          navActive = this;\r\n          toggle(navActive, true);\r\n        }\r\n\r\n        // Do this so the event handler on the body doesn't fire\r\n        return false;\r\n      },\r\n      [BODY]() {\r\n        if (navActive) {\r\n          hideActiveNavDropdown();\r\n        }\r\n      },\r\n      [OPENERS]: toggleNav,\r\n      [CLOSERS]: toggleNav,\r\n      [NAV_LINKS]() {\r\n        // A navigation link has been clicked! We want to collapse any\r\n        // hierarchical navigation UI it's a part of, so that the user\r\n        // can focus on whatever they've just selected.\r\n\r\n        // Some navigation links are inside accordions; when they're\r\n        // clicked, we want to collapse those accordions.\r\n        const acc = this.closest(accordion.ACCORDION);\r\n\r\n        if (acc) {\r\n          accordion.getButtons(acc).forEach((btn) => accordion.hide(btn));\r\n        }\r\n\r\n        // If the mobile navigation menu is active, we want to hide it.\r\n        if (isActive()) {\r\n          navigation.toggleNav.call(navigation, false);\r\n        }\r\n      }\r\n    }\r\n  },\r\n  {\r\n    init(root) {\r\n      const trapContainer = root.querySelector(NAV);\r\n\r\n      if (trapContainer) {\r\n        navigation.focusTrap = FocusTrap(trapContainer, {\r\n          Escape: onMenuClose\r\n        });\r\n      }\r\n\r\n      resize();\r\n      window.addEventListener('resize', resize, false);\r\n    },\r\n    teardown() {\r\n      window.removeEventListener('resize', resize, false);\r\n      navActive = false;\r\n    },\r\n    focusTrap: null,\r\n    toggleNav\r\n  }\r\n);\r\n\r\nmodule.exports = navigation;\r\n"],"file":"navigation.js"}
{"version":3,"sources":["src/patterns/components/usa-character-count/character-count.js"],"names":["select","require","behavior","PREFIX","prefix","CHARACTER_COUNT","INPUT","MESSAGE","VALIDATION_MESSAGE","MESSAGE_INVALID_CLASS","getCharacterCountElements","inputEl","characterCountEl","closest","Error","messageEl","querySelector","updateCountMessage","maxlength","parseInt","getAttribute","newMessage","currentLength","value","length","isOverLimit","difference","Math","abs","characters","guidance","classList","toggle","innerHTML","validationMessage","setCustomValidity","setupAttributes","removeAttribute","setAttribute","characterCount","input","init","root","forEach","module","exports"],"mappings":"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","sourcesContent":["'use strict';\r\nconst select = require('../../../utils/select');\r\nconst behavior = require('../../../utils/behavior');\r\nconst { prefix: PREFIX } = require('../../../config');\r\n\r\nconst CHARACTER_COUNT = `.${PREFIX}-character-count`;\r\nconst INPUT = `.${PREFIX}-character-count__field`;\r\nconst MESSAGE = `.${PREFIX}-character-count__message`;\r\nconst VALIDATION_MESSAGE = 'The content is too long.';\r\nconst MESSAGE_INVALID_CLASS = `${PREFIX}-character-count__message--invalid`;\r\n\r\n/**\r\n * The elements within the character count.\r\n * @typedef {Object} CharacterCountElements\r\n * @property {HTMLDivElement} characterCountEl\r\n * @property {HTMLSpanElement} messageEl\r\n */\r\n\r\n/**\r\n * Returns the root and message element\r\n * for an character count input\r\n *\r\n * @param {HTMLInputElement|HTMLTextAreaElement} inputEl The character count input element\r\n * @returns {CharacterCountElements} elements The root and message element.\r\n */\r\nconst getCharacterCountElements = (inputEl) => {\r\n  const characterCountEl = inputEl.closest(CHARACTER_COUNT);\r\n\r\n  if (!characterCountEl) {\r\n    throw new Error(`${INPUT} is missing outer ${CHARACTER_COUNT}`);\r\n  }\r\n\r\n  const messageEl = characterCountEl.querySelector(MESSAGE);\r\n\r\n  if (!messageEl) {\r\n    throw new Error(`${CHARACTER_COUNT} is missing inner ${MESSAGE}`);\r\n  }\r\n\r\n  return { characterCountEl, messageEl };\r\n};\r\n\r\n/**\r\n * Update the character count component\r\n *\r\n * @param {HTMLInputElement|HTMLTextAreaElement} inputEl The character count input element\r\n */\r\nconst updateCountMessage = (inputEl) => {\r\n  const { characterCountEl, messageEl } = getCharacterCountElements(inputEl);\r\n\r\n  const maxlength = parseInt(\r\n    characterCountEl.getAttribute('data-maxlength'),\r\n    10\r\n  );\r\n\r\n  if (!maxlength) {\r\n    return;\r\n  }\r\n\r\n  let newMessage = '';\r\n  const currentLength = inputEl.value.length;\r\n  const isOverLimit = currentLength && currentLength > maxlength;\r\n\r\n  if (currentLength === 0) {\r\n    newMessage = `${maxlength} characters allowed`;\r\n  }\r\n  else {\r\n    const difference = Math.abs(maxlength - currentLength);\r\n    const characters = `character${difference === 1 ? '' : 's'}`;\r\n    const guidance = isOverLimit ? 'over limit' : 'left';\r\n\r\n    newMessage = `${difference} ${characters} ${guidance}`;\r\n  }\r\n\r\n  messageEl.classList.toggle(MESSAGE_INVALID_CLASS, isOverLimit);\r\n  messageEl.innerHTML = newMessage;\r\n\r\n  if (isOverLimit && !inputEl.validationMessage) {\r\n    inputEl.setCustomValidity(VALIDATION_MESSAGE);\r\n  }\r\n\r\n  if (!isOverLimit && inputEl.validationMessage === VALIDATION_MESSAGE) {\r\n    inputEl.setCustomValidity('');\r\n  }\r\n};\r\n\r\n/**\r\n * Setup the character count component\r\n *\r\n * @param {HTMLInputElement|HTMLTextAreaElement} inputEl The character count input element\r\n */\r\nconst setupAttributes = (inputEl) => {\r\n  const { characterCountEl } = getCharacterCountElements(inputEl);\r\n\r\n  const maxlength = inputEl.getAttribute('maxlength');\r\n\r\n  if (!maxlength) {\r\n    return;\r\n  }\r\n\r\n  inputEl.removeAttribute('maxlength');\r\n  characterCountEl.setAttribute('data-maxlength', maxlength);\r\n};\r\n\r\nconst characterCount = behavior(\r\n  {\r\n    input: {\r\n      [INPUT]() {\r\n        updateCountMessage(this);\r\n      }\r\n    }\r\n  },\r\n  {\r\n    init(root) {\r\n      select(INPUT, root).forEach((input) => {\r\n        setupAttributes(input);\r\n        updateCountMessage(input);\r\n      });\r\n    },\r\n    MESSAGE_INVALID_CLASS,\r\n    VALIDATION_MESSAGE\r\n  }\r\n);\r\n\r\nmodule.exports = characterCount;\r\n"],"file":"character-count.js"}